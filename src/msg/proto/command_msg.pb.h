// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: command_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_command_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_command_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_command_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_command_5fmsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_command_5fmsg_2eproto;
namespace msg {
namespace proto {
class CommandMsg;
struct CommandMsgDefaultTypeInternal;
extern CommandMsgDefaultTypeInternal _CommandMsg_default_instance_;
}  // namespace proto
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::proto::CommandMsg* Arena::CreateMaybeMessage<::msg::proto::CommandMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {
namespace proto {

enum CommandType : int {
  COMMAND_LS = 0,
  COMMAND_DOWNFILE = 1,
  COMMAND_ERRORMSG = 2
};
bool CommandType_IsValid(int value);
constexpr CommandType CommandType_MIN = COMMAND_LS;
constexpr CommandType CommandType_MAX = COMMAND_ERRORMSG;
constexpr int CommandType_ARRAYSIZE = CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommandType_descriptor();
template<typename T>
inline const std::string& CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommandType_descriptor(), enum_t_value);
}
inline bool CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommandType>(
    CommandType_descriptor(), name, value);
}
// ===================================================================

class CommandMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.proto.CommandMsg) */ {
 public:
  inline CommandMsg() : CommandMsg(nullptr) {}
  ~CommandMsg() override;
  explicit PROTOBUF_CONSTEXPR CommandMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMsg(const CommandMsg& from);
  CommandMsg(CommandMsg&& from) noexcept
    : CommandMsg() {
    *this = ::std::move(from);
  }

  inline CommandMsg& operator=(const CommandMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMsg& operator=(CommandMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMsg* internal_default_instance() {
    return reinterpret_cast<const CommandMsg*>(
               &_CommandMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandMsg& a, CommandMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommandMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommandMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommandMsg& from) {
    CommandMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.proto.CommandMsg";
  }
  protected:
  explicit CommandMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kMsgFieldNumber = 3,
    kCommandFieldNumber = 1,
  };
  // optional bytes args = 2;
  bool has_args() const;
  private:
  bool _internal_has_args() const;
  public:
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_NODISCARD std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // optional bytes msg = 3;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // required .msg.proto.CommandType command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::msg::proto::CommandType command() const;
  void set_command(::msg::proto::CommandType value);
  private:
  ::msg::proto::CommandType _internal_command() const;
  void _internal_set_command(::msg::proto::CommandType value);
  public:

  // @@protoc_insertion_point(class_scope:msg.proto.CommandMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_command_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandMsg

// required .msg.proto.CommandType command = 1;
inline bool CommandMsg::_internal_has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommandMsg::has_command() const {
  return _internal_has_command();
}
inline void CommandMsg::clear_command() {
  _impl_.command_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::msg::proto::CommandType CommandMsg::_internal_command() const {
  return static_cast< ::msg::proto::CommandType >(_impl_.command_);
}
inline ::msg::proto::CommandType CommandMsg::command() const {
  // @@protoc_insertion_point(field_get:msg.proto.CommandMsg.command)
  return _internal_command();
}
inline void CommandMsg::_internal_set_command(::msg::proto::CommandType value) {
  assert(::msg::proto::CommandType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.command_ = value;
}
inline void CommandMsg::set_command(::msg::proto::CommandType value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:msg.proto.CommandMsg.command)
}

// optional bytes args = 2;
inline bool CommandMsg::_internal_has_args() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandMsg::has_args() const {
  return _internal_has_args();
}
inline void CommandMsg::clear_args() {
  _impl_.args_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CommandMsg::args() const {
  // @@protoc_insertion_point(field_get:msg.proto.CommandMsg.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandMsg::set_args(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.args_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.proto.CommandMsg.args)
}
inline std::string* CommandMsg::mutable_args() {
  std::string* _s = _internal_mutable_args();
  // @@protoc_insertion_point(field_mutable:msg.proto.CommandMsg.args)
  return _s;
}
inline const std::string& CommandMsg::_internal_args() const {
  return _impl_.args_.Get();
}
inline void CommandMsg::_internal_set_args(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.args_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandMsg::_internal_mutable_args() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.args_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandMsg::release_args() {
  // @@protoc_insertion_point(field_release:msg.proto.CommandMsg.args)
  if (!_internal_has_args()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.args_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.args_.IsDefault()) {
    _impl_.args_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandMsg::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.args_.SetAllocated(args, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.args_.IsDefault()) {
    _impl_.args_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.proto.CommandMsg.args)
}

// optional bytes msg = 3;
inline bool CommandMsg::_internal_has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandMsg::has_msg() const {
  return _internal_has_msg();
}
inline void CommandMsg::clear_msg() {
  _impl_.msg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CommandMsg::msg() const {
  // @@protoc_insertion_point(field_get:msg.proto.CommandMsg.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandMsg::set_msg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.msg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.proto.CommandMsg.msg)
}
inline std::string* CommandMsg::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:msg.proto.CommandMsg.msg)
  return _s;
}
inline const std::string& CommandMsg::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void CommandMsg::_internal_set_msg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* CommandMsg::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* CommandMsg::release_msg() {
  // @@protoc_insertion_point(field_release:msg.proto.CommandMsg.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.msg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CommandMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.proto.CommandMsg.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg::proto::CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg::proto::CommandType>() {
  return ::msg::proto::CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_command_5fmsg_2eproto
