// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fileinfos_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fileinfos_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fileinfos_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fileinfos_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fileinfos_5fmsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fileinfos_5fmsg_2eproto;
namespace msg {
namespace proto {
class FileInfoMsg;
struct FileInfoMsgDefaultTypeInternal;
extern FileInfoMsgDefaultTypeInternal _FileInfoMsg_default_instance_;
class fileInfo;
struct fileInfoDefaultTypeInternal;
extern fileInfoDefaultTypeInternal _fileInfo_default_instance_;
}  // namespace proto
}  // namespace msg
PROTOBUF_NAMESPACE_OPEN
template<> ::msg::proto::FileInfoMsg* Arena::CreateMaybeMessage<::msg::proto::FileInfoMsg>(Arena*);
template<> ::msg::proto::fileInfo* Arena::CreateMaybeMessage<::msg::proto::fileInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg {
namespace proto {

// ===================================================================

class fileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.proto.fileInfo) */ {
 public:
  inline fileInfo() : fileInfo(nullptr) {}
  ~fileInfo() override;
  explicit PROTOBUF_CONSTEXPR fileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  fileInfo(const fileInfo& from);
  fileInfo(fileInfo&& from) noexcept
    : fileInfo() {
    *this = ::std::move(from);
  }

  inline fileInfo& operator=(const fileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline fileInfo& operator=(fileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const fileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const fileInfo* internal_default_instance() {
    return reinterpret_cast<const fileInfo*>(
               &_fileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(fileInfo& a, fileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(fileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  fileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<fileInfo>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.proto.fileInfo";
  }
  protected:
  explicit fileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kLastWriteTimeFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const std::string& size() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_size(ArgT0&& arg0, ArgT... args);
  std::string* mutable_size();
  PROTOBUF_NODISCARD std::string* release_size();
  void set_allocated_size(std::string* size);
  private:
  const std::string& _internal_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_size(const std::string& value);
  std::string* _internal_mutable_size();
  public:

  // optional string last_write_time = 3;
  bool has_last_write_time() const;
  private:
  bool _internal_has_last_write_time() const;
  public:
  void clear_last_write_time();
  const std::string& last_write_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_write_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_write_time();
  PROTOBUF_NODISCARD std::string* release_last_write_time();
  void set_allocated_last_write_time(std::string* last_write_time);
  private:
  const std::string& _internal_last_write_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_write_time(const std::string& value);
  std::string* _internal_mutable_last_write_time();
  public:

  // @@protoc_insertion_point(class_scope:msg.proto.fileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_write_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fileinfos_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class FileInfoMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg.proto.FileInfoMsg) */ {
 public:
  inline FileInfoMsg() : FileInfoMsg(nullptr) {}
  ~FileInfoMsg() override;
  explicit PROTOBUF_CONSTEXPR FileInfoMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileInfoMsg(const FileInfoMsg& from);
  FileInfoMsg(FileInfoMsg&& from) noexcept
    : FileInfoMsg() {
    *this = ::std::move(from);
  }

  inline FileInfoMsg& operator=(const FileInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfoMsg& operator=(FileInfoMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileInfoMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileInfoMsg* internal_default_instance() {
    return reinterpret_cast<const FileInfoMsg*>(
               &_FileInfoMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FileInfoMsg& a, FileInfoMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfoMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfoMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileInfoMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileInfoMsg>(arena);
  }
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfoMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg.proto.FileInfoMsg";
  }
  protected:
  explicit FileInfoMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileinfosFieldNumber = 1,
  };
  // repeated .msg.proto.fileInfo fileinfos = 1;
  int fileinfos_size() const;
  private:
  int _internal_fileinfos_size() const;
  public:
  void clear_fileinfos();
  ::msg::proto::fileInfo* mutable_fileinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::proto::fileInfo >*
      mutable_fileinfos();
  private:
  const ::msg::proto::fileInfo& _internal_fileinfos(int index) const;
  ::msg::proto::fileInfo* _internal_add_fileinfos();
  public:
  const ::msg::proto::fileInfo& fileinfos(int index) const;
  ::msg::proto::fileInfo* add_fileinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::proto::fileInfo >&
      fileinfos() const;

  // @@protoc_insertion_point(class_scope:msg.proto.FileInfoMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::proto::fileInfo > fileinfos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fileinfos_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// fileInfo

// optional string name = 1;
inline bool fileInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool fileInfo::has_name() const {
  return _internal_has_name();
}
inline void fileInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& fileInfo::name() const {
  // @@protoc_insertion_point(field_get:msg.proto.fileInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void fileInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.proto.fileInfo.name)
}
inline std::string* fileInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:msg.proto.fileInfo.name)
  return _s;
}
inline const std::string& fileInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void fileInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* fileInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* fileInfo::release_name() {
  // @@protoc_insertion_point(field_release:msg.proto.fileInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void fileInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.proto.fileInfo.name)
}

// optional string size = 2;
inline bool fileInfo::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool fileInfo::has_size() const {
  return _internal_has_size();
}
inline void fileInfo::clear_size() {
  _impl_.size_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& fileInfo::size() const {
  // @@protoc_insertion_point(field_get:msg.proto.fileInfo.size)
  return _internal_size();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void fileInfo::set_size(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.size_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.proto.fileInfo.size)
}
inline std::string* fileInfo::mutable_size() {
  std::string* _s = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:msg.proto.fileInfo.size)
  return _s;
}
inline const std::string& fileInfo::_internal_size() const {
  return _impl_.size_.Get();
}
inline void fileInfo::_internal_set_size(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.size_.Set(value, GetArenaForAllocation());
}
inline std::string* fileInfo::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.size_.Mutable(GetArenaForAllocation());
}
inline std::string* fileInfo::release_size() {
  // @@protoc_insertion_point(field_release:msg.proto.fileInfo.size)
  if (!_internal_has_size()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.size_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.size_.IsDefault()) {
    _impl_.size_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void fileInfo::set_allocated_size(std::string* size) {
  if (size != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.size_.SetAllocated(size, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.size_.IsDefault()) {
    _impl_.size_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.proto.fileInfo.size)
}

// optional string last_write_time = 3;
inline bool fileInfo::_internal_has_last_write_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool fileInfo::has_last_write_time() const {
  return _internal_has_last_write_time();
}
inline void fileInfo::clear_last_write_time() {
  _impl_.last_write_time_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& fileInfo::last_write_time() const {
  // @@protoc_insertion_point(field_get:msg.proto.fileInfo.last_write_time)
  return _internal_last_write_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void fileInfo::set_last_write_time(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.last_write_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:msg.proto.fileInfo.last_write_time)
}
inline std::string* fileInfo::mutable_last_write_time() {
  std::string* _s = _internal_mutable_last_write_time();
  // @@protoc_insertion_point(field_mutable:msg.proto.fileInfo.last_write_time)
  return _s;
}
inline const std::string& fileInfo::_internal_last_write_time() const {
  return _impl_.last_write_time_.Get();
}
inline void fileInfo::_internal_set_last_write_time(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.last_write_time_.Set(value, GetArenaForAllocation());
}
inline std::string* fileInfo::_internal_mutable_last_write_time() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.last_write_time_.Mutable(GetArenaForAllocation());
}
inline std::string* fileInfo::release_last_write_time() {
  // @@protoc_insertion_point(field_release:msg.proto.fileInfo.last_write_time)
  if (!_internal_has_last_write_time()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.last_write_time_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_write_time_.IsDefault()) {
    _impl_.last_write_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void fileInfo::set_allocated_last_write_time(std::string* last_write_time) {
  if (last_write_time != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.last_write_time_.SetAllocated(last_write_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_write_time_.IsDefault()) {
    _impl_.last_write_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:msg.proto.fileInfo.last_write_time)
}

// -------------------------------------------------------------------

// FileInfoMsg

// repeated .msg.proto.fileInfo fileinfos = 1;
inline int FileInfoMsg::_internal_fileinfos_size() const {
  return _impl_.fileinfos_.size();
}
inline int FileInfoMsg::fileinfos_size() const {
  return _internal_fileinfos_size();
}
inline void FileInfoMsg::clear_fileinfos() {
  _impl_.fileinfos_.Clear();
}
inline ::msg::proto::fileInfo* FileInfoMsg::mutable_fileinfos(int index) {
  // @@protoc_insertion_point(field_mutable:msg.proto.FileInfoMsg.fileinfos)
  return _impl_.fileinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::proto::fileInfo >*
FileInfoMsg::mutable_fileinfos() {
  // @@protoc_insertion_point(field_mutable_list:msg.proto.FileInfoMsg.fileinfos)
  return &_impl_.fileinfos_;
}
inline const ::msg::proto::fileInfo& FileInfoMsg::_internal_fileinfos(int index) const {
  return _impl_.fileinfos_.Get(index);
}
inline const ::msg::proto::fileInfo& FileInfoMsg::fileinfos(int index) const {
  // @@protoc_insertion_point(field_get:msg.proto.FileInfoMsg.fileinfos)
  return _internal_fileinfos(index);
}
inline ::msg::proto::fileInfo* FileInfoMsg::_internal_add_fileinfos() {
  return _impl_.fileinfos_.Add();
}
inline ::msg::proto::fileInfo* FileInfoMsg::add_fileinfos() {
  ::msg::proto::fileInfo* _add = _internal_add_fileinfos();
  // @@protoc_insertion_point(field_add:msg.proto.FileInfoMsg.fileinfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::msg::proto::fileInfo >&
FileInfoMsg::fileinfos() const {
  // @@protoc_insertion_point(field_list:msg.proto.FileInfoMsg.fileinfos)
  return _impl_.fileinfos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fileinfos_5fmsg_2eproto
